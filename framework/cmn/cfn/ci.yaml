AWSTemplateFormatVersion: "2010-09-09"
Description: CI template
Parameters:
  ServiceName:
    Type: String
    Description: Enter the service name.
  ServiceJarFilename:
    Type: String
    Description: Enter the service JAR file name.
  CracCheckpointsBucket:
    Type: String
    Description: Enter CRaC checkpoints S3 bucket name
  VpcId:
    Type: String
    Description: Enter the id of the VPC that CI runs in (should have access to EFS where CRaC checkpoint files are stored)
  VpcSubnetIds:
    Type: CommaDelimitedList
    Description: Enter the ids of the subnets that CI runs in (should have access to EFS where CRaC checkpoint files are stored)
  SecurityGroupIds:
    Type: CommaDelimitedList
    Description: Enter the ids of the security group that CI uses for accessing VPC resources (EFS where CRaC checkpoint files are stored) 
  EfsDns:
    Type: String
    Description: Enter the EFS filesystem DNS

Resources:
  CiCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}-CiCodeBuildRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${ServiceName}-CiCodeBuildRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ServiceName}-Ci"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ServiceName}-Ci:*"
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource: '*'
              - Effect: Allow
                Action:
                  - "ecr:DescribeRepositories"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:PutImage"
                Resource:
                  - !GetAtt ServiceEcrRepo.Arn
              - Effect: Allow
                Action:
                  - "s3:DeleteObject"
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                Resource: 
                  - !Sub "arn:aws:s3:::${CracCheckpointsBucket}"
                  - !Sub "arn:aws:s3:::${CracCheckpointsBucket}/${ServiceName}/*"
                  - !Sub "${CodePipelineArtifactStoreBucket.Arn}"
                  - !Sub "${CodePipelineArtifactStoreBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeDhcpOptions"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeVpcs"
                Resource: '*'
              - Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterfacePermission"
                Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
                Condition:
                  StringEquals:
                    "ec2:AuthorizedService": "codebuild.amazonaws.com"

  CiCodeBuildKms:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS key for CodeBuild"
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'

  CiCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      EncryptionKey: !GetAtt CiCodeBuildKms.Arn
      Artifacts: 
        Type: NO_ARTIFACTS
      Description: !Sub "CodeBuild project that represents the CI pipeline for ${ServiceName}"
      Environment: 
        ComputeType: "BUILD_GENERAL1_SMALL"
        EnvironmentVariables:
          - Name: SRVC_NAME
            Type: PLAINTEXT
            Value: !Sub "${ServiceName}"
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"
          - Name: ROLE_ARN
            Type: PLAINTEXT
            Value: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ServiceName}-CiRole"
          - Name: SRVC_JAR_FILE_NAME
            Type: PLAINTEXT
            Value: !Sub "${ServiceJarFilename}"
          - Name: CRAC_CHECKPOINTS_BUCKET
            Type: PLAINTEXT
            Value: !Sub "${CracCheckpointsBucket}"
        Image: "aws/codebuild/standard:7.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        Subnets: !Ref VpcSubnetIds
        VpcId: !Ref VpcId
      FileSystemLocations:
        - Identifier: "crac_checkpoints_efs"
          Location: !Sub "${EfsDns}:/"
          MountPoint: "/opt/crac-files"
          Type: "EFS"
      LogsConfig:
        CloudWatchLogs: 
          Status: "ENABLED"
      Name: !Sub "${ServiceName}-Ci"
      ServiceRole: !GetAtt CiCodeBuildRole.Arn
      Source: 
        Type: "CODECOMMIT"
        Location: !GetAtt ServiceGitRepo.CloneUrlHttp

  ServiceGitRepo:
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: !Sub "This repo contains the code artifacts for ${ServiceName}"
      RepositoryName: !Ref ServiceName

  ServiceEcrRepo:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref ServiceName
      ImageScanningConfiguration:
        ScanOnPush: true
      
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Sub 'crac-accesslogs-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false
  
  AmazonCloudWatchEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:codepipeline:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref ServicePipeline
  
  AmazonCloudWatchEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Join 
            - ''
            - - 'arn:aws:codecommit:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref ServiceName
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      Targets:
        - Arn: !Join 
            - ''
            - - 'arn:aws:codepipeline:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref ServicePipeline
          RoleArn: !GetAtt 
            - AmazonCloudWatchEventRole
            - Arn
          Id: codepipeline-ServicePipeline
  ServicePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Ref ServiceName
      RoleArn: !GetAtt 
        - CodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: 'main'
                RepositoryName: !Ref ServiceName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "${ServiceName}-Ci"
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
  CodePipelineServiceRole: #Permissions to be narrowed down
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: !GetAtt ServiceGitRepo.Arn
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: !GetAtt CiCodeBuild.Arn
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:GetObject'
                  - 's3:GetObjectAcl'
                  - 's3:DeleteObject'
                Resource: 
                  - !GetAtt CodePipelineArtifactStoreBucket.Arn
                  - !Join 
                    - ''
                    - - !GetAtt 
                        - CodePipelineArtifactStoreBucket
                        - Arn
                      - /*
                  
      
Outputs:
  CiCodeBuildArn:
    Description: The ARN of the IAM role used by the CodeBuild project
    Value: !GetAtt CiCodeBuildRole.Arn
    Export:
      Name: !Sub "${ServiceName}-CiCodeBuildRoleArn"